#!/usr/bin/env python

import json
import yara
import sys

from argparse import ArgumentParser
from pymandrake import Plugin

# RULES_FILE is the base yara rules file that is compiled and used to 
# match against. This accepts the include keyword in yara, so rules files can
# be nested and loaded from multiple files.
RULES_FILE = 'rules.yar'
# RULES is the yara rules object once the rules are loaded in and compiled
RULES = None

def analyze(fmeta):
	'''Analyze a file utilizing YARA.

	Args:
		fmeta (string): A json string describing files.
	Returns:
		string: A json string describing analysis results.
	'''

	fm = json.loads(fmeta)

	analysis = dict()
	analysis['errors'] = []

	try:
		matches = RULES.match(fm.get('Filepath'))
	except yara.Error as e:
		matches = []
		analysis['matches'] = matches
		analysis['errors'].append('YARA Runtime error: %s' % e)
		return json.dumps(analysis)

	analysis['matches'] = [str(match) for match in matches]

	return json.dumps(analysis)

def main():

	# Include global args in current scope.
	global RULES_FILE
	global RULES

	parser = ArgumentParser(description='Mandrake plugin for YARA')
	parser.add_argument('--rules_file', type=str, 
						default=RULES_FILE,
						help='file where yara rules are loaded from')
	args = parser.parse_args()


	plug = Plugin('YARA')
	RULES_FILE = args.rules_file

	try:
		RULES = yara.compile(RULES_FILE)
	except yara.Error:
		plug.log('Unable to compile yara rules file %s' % (RULES_FILE))

	plug.listen(analyze)

if __name__ == '__main__':
	main()
