#!/usr/bin/env python

import json
import pefile
import peutils

from pymandrake import Plugin, to_unicode
from datetime import datetime

def analyze(fmeta):
	
	fm = json.loads(fmeta)

	analysis = dict()
	analysis['errors'] = []

	try:
		pe = pefile.PE(fm['Filepath'])
	except:
		analysis['errors'].append('unsupported filetype')
		return json.dumps(analysis)

	# Collect interesting flags from the binary
	# Allows >32 bit values for ASLR
	analysis['high entropy aslr'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA
	analysis['uses aslr'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
	analysis['force integrity'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY
	# DEP
	analysis['uses dep'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NX_COMPAT
	analysis['force no isolation'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NO_ISOLATION
	analysis['uses seh'] = not pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NO_SEH
	analysis['no bind'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NO_BIND
	analysis['app container'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_APPCONTAINER
	analysis['wdm driver'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_WDM_DRIVER
	analysis['uses cfg'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_GUARD_CF
	analysis['terminal server aware'] = pe.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE

	# Determine whether the pe file is likely to be packed
	analysis['is probably packed'] = peutils.is_probably_packed(pe)

	analysis['warnings'] = pe.get_warnings()

	analysis['is dll'] = pe.is_dll()
	analysis['is exe'] = pe.is_exe()
	analysis['is driver'] = pe.is_driver()

	analysis['verify checksum'] = pe.verify_checksum()

	compile_date = datetime.fromtimestamp(pe.FILE_HEADER.TimeDateStamp)
	analysis['compile date'] = str(compile_date)

	analysis['imphash'] = pe.get_imphash()

	# Parse out the import table from within the PE file
	imports = {}
	if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
		analysis['has import table'] = True
		for entry in pe.DIRECTORY_ENTRY_IMPORT:
			imports[entry.dll] = []
			for imp in entry.imports:
				imports[entry.dll].append(imp.name)

		analysis['imports'] = imports

	# Parse out the export table listed within the PE file
	exports = []
	if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
		analysis['has export table'] = True
		for entry in pe.DIRECTORY_ENTRY_EXPORT.symbols:
			exports.append(entry.name)

		analysis['exports'] = exports

	pe.close()

	return json.dumps(analysis)

def main():

	plug = Plugin('PE')
	plug.listen(analyze)

if __name__ == '__main__':
	main()
