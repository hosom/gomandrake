#!/usr/bin/env python

import json

from oletools import olevba
from oletools.thirdparty import olefile

from pymandrake import Plugin, to_unicode

def analyze(fmeta):

	fm = json.loads(fmeta)
	
	analysis = dict()
	analysis['errors'] = []

	process_metadata = False

	try:
		ole = olefile.OleFileIO(fm['Filepath'])
		process_metadata = True
	except IOError:
		analysis['errors'].append('unsupported filetype')
	except RuntimeError:
		analysis['errors'].append('max recursion reached')

	if process_metadata:
		meta = ole.get_metadata()

		for prop in meta.SUMMARY_ATTRIBS:
			value = getattr(meta, prop)
			analysis[prop] = to_unicode(str(value))

		for prop in meta.DOCSUM_ATTRIBS:
			value = getattr(meta, prop)
			analysis[prop] = to_unicode(str(value))

		# The thumbnail is an embedded image file that can be used for the 
		# thumbnail image for the document. This is a mess to include, so
		# the easiest option is to just throw it out...
		# In the future, we could extract it and drop it to the analysis
		# directory
		if analysis.get('thumbnail'):
			del analysis['thumbnail']

		ole.close()

	# Parse the file again, this time looking for VBA scripts.
	try:
		parser = olevba.VBA_Parser(fm['Filepath'])
	except TypeError:
		analysis['errors'].append('unsupported filetype')
		return analysis

	results = parser.analyze_macros()

	contains_macro = parser.detect_vba_macros()

	if contains_macro:
		analysis['vba'] = parser.reveal()

	parser.close()

	return json.dumps(analysis)

def main():

	plug = Plugin('Doc')
	plug.listen(analyze)

if __name__ == '__main__':
	main()
